{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/html-prettify/src/main.js","../node_modules/html-prettify/src/utils/addIndentation.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/html-prettify/src/utils/toLines.js","../node_modules/html-prettify/src/utils/removeEmptyLines.js","tool/SnipcartButtonGenerator.js"],"names":["arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","module","exports","arr","len","length","i","arr2","Array","addIndentation","require","toLines","markup","splitted","splittedHtml","level","opened","reverse","reduce","indented","elTag","substring","splice","indentation","repeat","newIndented","join","arrayLikeToArray","isArray","iter","Symbol","iterator","Object","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","removeEmptyLines","formatted","line","prevArr","startsWith","closedLine","nonFormattedString","trim","split","nonempty","trimmedLine","prettify","useStyles","createUseStyles","contentFloat","float","preview","extend","textAlign","width","option","padding","optionForm","SnipcartButtonGenerator","classes","className","noValidate","autoComplete","id","label","text","language","codeBlock","theme","dracula","showLineNumbers"],"mappings":"+GAAA,IAAIA,EAAoB,EAAQ,KAE5BC,EAAkB,EAAQ,KAE1BC,EAA6B,EAAQ,KAErCC,EAAoB,EAAQ,KAMhCC,EAAOC,QAJP,SAA4BC,GAC1B,OAAON,EAAkBM,IAAQL,EAAgBK,IAAQJ,EAA2BI,IAAQH,M,kBCC9FC,EAAOC,QAVP,SAA2BC,EAAKC,IACnB,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAE/C,IAAK,IAAIC,EAAI,EAAGC,EAAO,IAAIC,MAAMJ,GAAME,EAAIF,EAAKE,IAC9CC,EAAKD,GAAKH,EAAIG,GAGhB,OAAOC,I,oBCPT,IAAME,EAAiBC,EAAQ,KACzBC,EAAUD,EAAQ,KAexBT,EAAOC,QANU,SAAAU,GACf,IAAMC,EAAWF,EAAQC,GAEzB,OAAOH,EAAeI,K,iCC4BxBZ,EAAOC,QAjCgB,SAAAY,GACrB,IAAIC,EAAQ,EACNC,EAAS,GAEf,OAAOF,EAAaG,UAAUC,QAAO,SAACC,EAAUC,GAC1CJ,EAAOX,QACNU,GACAC,EAAOD,IAEPC,EAAOD,KAAWK,EAAMC,UAAU,EAAGL,EAAOD,GAAOV,OAAS,KAE/DW,EAAOM,OAAOP,EAAO,GACrBA,KAGF,IAAMQ,EAAc,IAAIC,OAAOT,EAAgB,EAARA,EAAY,GAE7CU,EAAc,CAAC,GAAJ,OACZF,GADY,OACEH,IADF,SAEZD,IAUL,MAL8B,OAA1BC,EAAMC,UAAU,EAAG,KACrBN,IACAC,EAAOD,GAASK,EAAMC,UAAU,EAAGD,EAAMf,OAAS,IAG7CoB,IACN,IAAIC,KAAK,Q,oBCtCd,IAAIC,EAAmB,EAAQ,KAM/B1B,EAAOC,QAJP,SAA4BC,GAC1B,GAAIK,MAAMoB,QAAQzB,GAAM,OAAOwB,EAAiBxB,K,kBCClDF,EAAOC,QAJP,SAA0B2B,GACxB,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOrB,MAAMyB,KAAKJ,K,oBCD1F,IAAIF,EAAmB,EAAQ,KAW/B1B,EAAOC,QATP,SAAqCgC,EAAGC,GACtC,GAAKD,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAOP,EAAiBO,EAAGC,GACtD,IAAIC,EAAIJ,OAAOK,UAAUC,SAASC,KAAKL,GAAGM,MAAM,GAAI,GAEpD,MADU,WAANJ,GAAkBF,EAAEO,cAAaL,EAAIF,EAAEO,YAAYC,MAC7C,QAANN,GAAqB,QAANA,EAAoB5B,MAAMyB,KAAKC,GACxC,cAANE,GAAqB,2CAA2CO,KAAKP,GAAWT,EAAiBO,EAAGC,QAAxG,K,kBCJFlC,EAAOC,QAJP,WACE,MAAM,IAAI0C,UAAU,0I,iCCDhBC,EAAmBnC,EAAQ,KAsCjCT,EAAOC,QA5BS,SAAAU,GACd,IAAII,EAAS,GAIb,OAFsB6B,EAAiBjC,GAElBM,QAAO,SAAC4B,EAAWC,EAAMzC,EAAG0C,GAC/C,GAAID,EAAKE,WAAW,KAAM,CACxB,GAAI3C,IAAM0C,EAAQ3C,OAAS,EACzB,kBAAWyC,GAAX,CAAsB9B,EAAQ+B,IAGhC,IAAMG,EAAalC,EAGnB,OAFAA,EAAS+B,EAELG,EAAW7C,OACb,YAAWyC,GAAX,CAAsBI,IAGjBJ,EAMT,OAFA9B,GAAmB,MAAT+B,EAAeA,EAAf,WAA0BA,GAE7BD,IACN,M,iCCjBL7C,EAAOC,QAVkB,SAAAiD,GAAkB,OACzCA,EACGC,OACAC,MAAM,MACNnC,QAAO,SAACoC,EAAUP,GACjB,IAAMQ,EAAcR,EAAKK,OACzB,OAAOG,EAAYlD,OAAZ,YAAyBiD,GAAzB,CAAmCC,IAAeD,IACxD,M,iCCfP,0FAIME,EAAS9C,EAAQ,KAEjB+C,EAAYC,YAAgB,CAC9BC,aAAa,CACTC,MAAO,QAEXC,QAAS,CACLC,OAAO,eACPC,UAAW,OACXC,MAAM,OAEVC,OAAQ,CACJH,OAAO,eACPI,QAAS,OACTF,MAAO,OAEXG,WAAW,KAOA,SAASC,IACpB,IAAMC,EAAUZ,IAmBhB,OACI,sBAAKa,UAAU,cAAf,UACI,qBAAKA,UAAWD,EAAQJ,OAAxB,SACI,sBAAMK,UAAWD,EAAQF,WAAYI,YAAU,EAACC,aAAa,MAA7D,SACI,cAAC,IAAD,CAAWC,GAAG,iBAAiBC,MAAM,iBAG7C,qBAAKJ,UAAWD,EAAQR,QAAxB,SACI,cAAC,IAAD,CACIc,KAAMnB,EA1Bb,gsCA2BOoB,SAAU,MACVC,WAAS,EACTC,MAAOC,IACPC,iBAAiB","file":"static/js/158.6b7b0681.chunk.js","sourcesContent":["var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","const addIndentation = require('./utils/addIndentation');\nconst toLines = require('./utils/toLines');\n\n/**\n * @function prettify\n * @description Formats the html markup with 2 spaces indentation\n *\n * @param {string} markup\n * @returns {string} Indented html markup without empty lines\n */\nconst prettify = markup => {\n  const splitted = toLines(markup);\n\n  return addIndentation(splitted);\n};\n\nmodule.exports = prettify;\n","/**\n * @function addIndentation\n * @description Adds 2 spaces indentation\n *\n * @param {string[]} splittedHtml\n * @returns {string} Formatted html markup string with 2 spaces indentation\n */\n\nconst addIndentation = splittedHtml => {\n  let level = 0;\n  const opened = [];\n\n  return splittedHtml.reverse().reduce((indented, elTag) => {\n    if (opened.length\n      && level\n      && opened[level]\n      /* if current element tag is the same as previously opened one */\n      && opened[level] === elTag.substring(1, opened[level].length + 1)\n    ) {\n      opened.splice(level, 1);\n      level--;\n    }\n\n    const indentation = ' '.repeat(level ? level * 2 : 0);\n\n    const newIndented = [\n      `${indentation}${elTag}`,\n      ...indented,\n    ];\n\n    // if current element tag is closing tag\n    // add it to opened elements\n    if (elTag.substring(0, 2) === '</') {\n      level++;\n      opened[level] = elTag.substring(2, elTag.length - 1);\n    }\n\n    return newIndented;\n  }, []).join('\\n');\n};\n\nmodule.exports = addIndentation;\n","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","const removeEmptyLines = require('./removeEmptyLines');\n\n/**\n * @function toLines\n * @description Takes string with any formatting and splits it on new lines and removes empty lines\n *\n * @param {string} markup\n * @returns {string[]} Array of strings splitted on new lines without empty lines\n */\n\nconst toLines = markup => {\n  let opened = '';\n\n  const nonemptyLines = removeEmptyLines(markup);\n\n  return nonemptyLines.reduce((formatted, line, i, prevArr) => {\n    if (line.startsWith('<')) {\n      if (i === prevArr.length - 1) {\n        return [...formatted, opened, line];\n      }\n\n      const closedLine = opened;\n      opened = line;\n\n      if (closedLine.length) {\n        return [...formatted, closedLine];\n      }\n\n      return formatted;\n    }\n\n    // append current line to previous line\n    opened += line === '>' ? line : ` ${line}`;\n\n    return formatted;\n  }, []);\n};\n\nmodule.exports = toLines;\n","/**\n * @function removeEmptyLines\n * @description Takes any string as param, splits it to lines and removes empty lines\n *\n * @param {string} nonFormattedString Any non formatted string\n * @returns {string[]} Array of strings separated on new lines\n */\n\nconst removeEmptyLines = nonFormattedString => (\n  nonFormattedString\n    .trim()\n    .split('\\n')\n    .reduce((nonempty, line) => {\n      const trimmedLine = line.trim();\n      return trimmedLine.length ? [...nonempty, trimmedLine] : nonempty;\n    }, [])\n);\n\nmodule.exports = removeEmptyLines;\n","import React from \"react\";\nimport {createUseStyles} from 'react-jss'\nimport { CopyBlock, dracula } from \"react-code-blocks\";\nimport TextField from '@material-ui/core/TextField';\nconst prettify=require('html-prettify');\n\nconst useStyles = createUseStyles({\n    contentFloat:{\n        float: 'left'\n    },\n    preview: {\n        extend:'contentFloat',\n        textAlign: 'left',\n        width:'70%',\n    },\n    option: {\n        extend:'contentFloat',\n        padding: '15px',\n        width: '30%'\n    },\n    optionForm:{\n\n    }\n})\n\n\n\nexport default function SnipcartButtonGenerator(){\n    const classes = useStyles()\n\n    let code=`\n    <button class=\"snipcart-checkout\">\n        <svg style=\"color:white;\" version=\"1.1\" width=\"25\" height=\"25\"\n             xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\n             xmlns:xlink=\"http://www.w3.org/1999/xlink\" enable-background=\"new 0 0 512 512\">\n            <g>\n                <g>\n                    <path\n                        d=\"m464.5,301.1l36.5-178h-359.7l-12.5-59.2-108.4-52.9-9.4,18.7 99,47.8 50,238.8h289c0,0 28.5,17.9 17.5,40.5-4.9,7-12.5,15.6-26.1,15.6h-287.6v20.6h287.7c19.8,0 36.5-10.4 45.9-27 18.4-34.4-21.9-64.9-21.9-64.9zm-286.7-5.7l-32.3-151.6h330.5l-31.3,151.6h-266.9z\"/>\n                    <path\n                        d=\"m212.2,422.1c-21.9,0-39.6,17.6-39.6,39.4s17.7,39.4 39.6,39.4 39.6-17.6 39.6-39.4-17.7-39.4-39.6-39.4zm0,58.1c-10.4,0-18.8-8.3-18.8-18.7s8.3-18.7 18.8-18.7 18.8,8.3 18.8,18.7-8.4,18.7-18.8,18.7z\"/>\n                    <path\n                        d=\"m424.9,422.1c-21.9,0-39.6,17.6-39.6,39.4s17.7,39.5 39.6,39.5 40.7-17.6 39.6-39.4c0-21.8-17.7-39.5-39.6-39.5zm18.8,39.5c0,10.4-8.3,18.7-18.8,18.7s-18.8-8.3-18.8-18.7 8.3-18.7 18.8-18.7 19.8,8.3 18.8,18.7z\"/>\n                </g>\n            </g>\n        </svg>\n    </button>`\n    return (\n        <div className=\"toolContent\">\n            <div className={classes.option}>\n                <form className={classes.optionForm} noValidate autoComplete=\"off\">\n                    <TextField id=\"standard-basic\" label=\"Standard\" />\n                </form>\n            </div>\n            <div className={classes.preview}>\n                <CopyBlock\n                    text={prettify(code)}\n                    language={\"JSX\"}\n                    codeBlock\n                    theme={dracula}\n                    showLineNumbers={false}\n                />\n            </div>\n        </div>\n    )\n}\n"],"sourceRoot":""}